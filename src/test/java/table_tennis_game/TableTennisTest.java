/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package table_tennis_game;

import org.junit.Test;
import static org.junit.Assert.*;

import org.junit.Before;

public class TableTennisTest {
    // Creating dummy data for test.
    Player dummyFirstPlayer = null;
    Player dummySecondPlayer = null;
    TableTennis classUnderTest = null;
    int turn = 0;
    String GAME_TIED_AT = null;

    @Before
    public void setUp() throws Exception {
        this.dummyFirstPlayer = new Player(1, "Dummy first player");
        this.dummySecondPlayer = new Player(2, "Dummy second player");
        this.classUnderTest = new TableTennis(this.dummyFirstPlayer, this.dummySecondPlayer);
        this.turn = Constant.INITIAL_TURN_VALUE;
        this.GAME_TIED_AT = Constant.NOT_TIED;
    }

    @Test
    public void testGenerateRandomNumber() throws Exception {
        int generatedOutput = this.classUnderTest.generateRandomNumber();
        assertNotNull(generatedOutput);
        assertTrue(generatedOutput >= 0 && generatedOutput <= 9);
    }

    @Test
    public void testGetPlayerServeTurn() throws Exception {
        Player firstCallGetPlayerServeTurnActual = this.classUnderTest.getPlayerServeTurn(this.turn);
        Player secondCallGetPlayerServeTurnActual = this.classUnderTest.getPlayerServeTurn(this.turn);
        Player thirdCallGetPlayerServeTurnActual = this.classUnderTest.getPlayerServeTurn(this.turn);
        Player fourthCallGetPlayerServeTurnActual = this.classUnderTest.getPlayerServeTurn(this.turn);

        // Should be alternate serve turn between 2 players after 2 turns in a row.
        assertEquals(this.dummyFirstPlayer, firstCallGetPlayerServeTurnActual);
        assertEquals(this.dummyFirstPlayer, secondCallGetPlayerServeTurnActual);
        assertEquals(this.dummySecondPlayer, thirdCallGetPlayerServeTurnActual);
        assertEquals(this.dummySecondPlayer, fourthCallGetPlayerServeTurnActual);
    }

    @Test
    public void testGetPlayerWhoWonPoint() throws Exception {
        Player playerWhoWonPointInCurrentTurn = this.classUnderTest.getPlayerWhoWonPoint();
        assertTrue(playerWhoWonPointInCurrentTurn == this.dummyFirstPlayer
                || playerWhoWonPointInCurrentTurn == this.dummySecondPlayer);
    }

    @Test
    public void testGetTableTennisWinner() throws Exception {
        Player winnerPlayer = this.classUnderTest.getTableTennisWinner();
        assertTrue(winnerPlayer == this.dummyFirstPlayer || winnerPlayer == this.dummySecondPlayer);
    }
}
